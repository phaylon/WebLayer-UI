
SIMPLE DIALOG FREEFORM WIDGETS:

    $ctx->make('Dialog::Simple')
        ->field(Widget => sub {
            $_->fixed(label => 'Date')
              ->maps('date.full' => {
                  year  => 'date.year',
                  month => 'date.month',
                  day   => 'date.day',
              })
              ->widget($ctx->make('Segment')->children(
                $ctx->make('Input::Text')
                    ->fixed(size => 4)
                    ->provides(value => 'date.year'),
                '/',
                $ctx->make('Input::Text')
                    ->fixed(size => 2)
                    ->provides(value => 'date.month'),
                '/',
                $ctx->make('Input::Text')
                    ->fixed(size => 2)
                    ->provides(value => 'date.day'),
              ));
        });


CHECKBOX GROUPS:

    $ctx->make('Input::CheckboxGroup')
        ->provides(selected => 'icbg.current')
        ->fixed(options => [
            { key => 23, value => 'Foo' },
            { key => 42, value => 'Bar' },
        ]);


CHECKBOXES:

    $ctx->make('Input::Checkbox')
        ->provides(checked => 'icb.true');


RADIO GROUPS:

    $ctx->make('Input::RadioGroup')
        ->provides(selected => 'irg.current')
        ->fixed(options => [
            { key => 3, value => 'Foo' },
            { key => 4, value => 'Bar' },
        ]);


LINKS:

    $ctx->make('Link')
        ->receives(href => 'link.href')     # defaults to '#'
        ->children(...);


ANCHORS:

    $ctx->make('Anchor')
        ->id('foo')
        ->children(...);


IMAGES:

    $ctx->make('Image')
        ->receives(src => 'some.iamge.uri');


MAPPINGS:

    $comp->maps('some.mapping' => {
        foo => 'some.other.foo',
        bar => 'yet.another.bar',
    })


ACTION SHORTCUTS:

    $_->remove('#foo', '.bar')
    $_->request(sub { ... })
    $_->show(targets => ['#foo'], duration => 'fast')
    $_->hide(targets => ['#foo'], duration => 'fast')


LOGGING:

    $code_producer->log(
        'some-value',                   # literal
        [get => 'provided.data'],       # env data
        [data => 'foo'],                # result data
    );


ALIASED REQUEST I/O:

    $req->send_values_as(
        'foo.bar' => 'foo',
        'foo.baz' => 'bar',
    );

    $req->populate_as(
        'foo' => 'foo.bar',
        'bar' => 'foo.baz',
    );


USER DEFINED FUNCTIONS:

    function myFunc (position, options) {
        if (options.some_option) {
            return { some_result: options.some_option }
        }
        return false;
    }

    $comp->on(click => sub {
        $_->invoke(myFunc => sub {
          $_->args(some_option => 'some.value')
            ->when_success(sub {
                $_->populate_as('some_result' => 'some.receiver');
            })
            ->when_error(sub {
                $_->log('an error occured');
            });
        });
    });
