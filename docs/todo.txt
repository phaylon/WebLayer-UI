** Note: These are just ideas **

CLASS TOGGLES:

    $comp->class_toggle('active', 'navlink.current')


WATCHERS:

    $comp->watch('some.value', sub {
        $_->perform('Something', ...);
    });


SWITCHABLE WIDGETS:

    $ctx->make('Switchable::Bool')
        ->receives(state => 'page.has_next')
        ->provides(state => 'page.has_next')
        ->case_true(
            $ctx->make('Link')
                ->fixed(content => 'Next Page')
                ->on(click => sub {
                    # retrieve next page
                }),
        )
        ->case_false('Next Page');

    $ctx->make('Switchable::Value')
        ->receives(state => 'list.order')
        ->provides(state => 'list.order')
        ->case('asc', ...)
        ->case('desc', ...)
        ->case('off', ...)
        ->case_else(...);


OPTION GROUPS:

    [{...}, [$title, {...}]]


LISTS:

    $ctx->make('List')
        ->unordered
        ->collection(sub {
            $_->provides(all => 'list.full')
              ->receives(replace => 'list.replace')
              ->keyed_by('id')
              ->contains(
                id      => 'item.id',
                content => 'item.content',
              );
        })
        ->prototype(
            $ctx->make('Paragraph')
                ->provides('item.content')
                ->receives('item.content'),
        );


TABLES:

    $ctx->make('Table')
        ->collection(sub {
            $_->provides(all => 'table.full')
              ->receives(replace => 'table.replace')
              ->contains(
                id   => 'item.id',
                name => 'item.name',
                city => 'item.city',
              );
        })
        ->header('Simple', sub {
            $_->sorting('Stacked', sub {
                $_->state('table.sorting')
                  ->asc(
                    $ctx->make('Image')
                        ->fixed(src => 'asc.png')
                  )
                  ->desc(
                    $ctx->make('Image')
                        ->fixed(src => 'asc.png')
                  )
                  ->off(
                    $ctx->make('Image')
                        ->fixed(src => 'asc.png')
                  )
              })
              ->wrap_column(sub {
                  $ctx->make('Segment')
                      ->on(click => $_->toggle_sorting)
                      ->children(
                        $_->is_sortable ? $_->sort_mark : (),
                        $_->label,
                      );
              });
        })
        ->column('Text', id => sub {
            $_->label('User ID')
              ->provides(content => 'item.id')
              ->receives(content => 'item.id')
              ->sortable;
        })
        ->column('Text', name => sub {
            $_->label('Name')
              ->provides(content => 'item.name')
              ->receives(content => 'item.name')
              ->sortable;
        })
        ->column('Text', city => sub {
            $_->label('City')
              ->provides(content => 'item.city')
              ->receives(content => 'item.city')
              ->sortable;
        });


USER DEFINED EVENTS:

    $ctx->make('Page')
        ->event(update => sub {
            $_->perform(...);
        });

    $comp->on(event => sub {
        $_->trigger('update');
    });


SIMPLE DIALOG FREEFORM WIDGETS:

    $ctx->make('Dialog::Simple')
        ->field(Widget => sub {
            $_->fixed(label => 'Date')
              ->maps('date.full' => {
                  year  => 'date.year',
                  month => 'date.month',
                  day   => 'date.day',
              })
              ->widget($ctx->make('Segment')->children(
                $ctx->make('Input::Text')
                    ->fixed(size => 4)
                    ->provides(value => 'date.year'),
                '/',
                $ctx->make('Input::Text')
                    ->fixed(size => 2)
                    ->provides(value => 'date.month'),
                '/',
                $ctx->make('Input::Text')
                    ->fixed(size => 2)
                    ->provides(value => 'date.day'),
              ));
        });


CHECKBOX GROUPS:

    $ctx->make('Input::CheckboxGroup')
        ->provides(selected => 'icbg.current')
        ->fixed(options => [
            { key => 23, value => 'Foo' },
            { key => 42, value => 'Bar' },
        ]);


CHECKBOXES:

    $ctx->make('Input::Checkbox')
        ->provides(checked => 'icb.true');


RADIO GROUPS:

    $ctx->make('Input::RadioGroup')
        ->provides(selected => 'irg.current')
        ->fixed(options => [
            { key => 3, value => 'Foo' },
            { key => 4, value => 'Bar' },
        ]);


LINKS:

    $ctx->make('Link')
        ->receives(href => 'link.href')     # defaults to '#'
        ->children(...);


ANCHORS:

    $ctx->make('Anchor')
        ->id('foo')
        ->children(...);


IMAGES:

    $ctx->make('Image')
        ->receives(src => 'some.iamge.uri');


MAPPINGS:

    $comp->maps('some.mapping' => {
        foo => 'some.other.foo',
        bar => 'yet.another.bar',
    })


ACTION SHORTCUTS:

    $_->remove('#foo', '.bar')
    $_->request(sub { ... })
    $_->show(targets => ['#foo'], duration => 'fast')
    $_->hide(targets => ['#foo'], duration => 'fast')


LOGGING:

    $code_producer->log(
        'some-value',                   # literal
        [get => 'provided.data'],       # env data
        [data => 'foo'],                # result data
    );


ALIASED REQUEST I/O:

    $req->send_values_as(
        'foo.bar' => 'foo',
        'foo.baz' => 'bar',
    );

    $req->populate_as(
        'foo' => 'foo.bar',
        'bar' => 'foo.baz',
    );


USER DEFINED FUNCTIONS:

    function myFunc (position, options) {
        if (options.some_option) {
            return { some_result: options.some_option }
        }
        return false;
    }

    $comp->on(click => sub {
        $_->invoke(myFunc => sub {
          $_->args(some_option => 'some.value')
            ->when_success(sub {
                $_->populate_as('some_result' => 'some.receiver');
            })
            ->when_error(sub {
                $_->log('an error occured');
            });
        });
    });
